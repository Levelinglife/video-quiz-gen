
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { videoId } = await req.json();
    const googleApiKey = Deno.env.get('GOOGLE_API_KEY');

    if (!googleApiKey) {
      throw new Error('Google API key not configured');
    }

    // First, try to get captions list
    const captionsResponse = await fetch(
      `https://www.googleapis.com/youtube/v3/captions?videoId=${videoId}&key=${googleApiKey}&part=snippet`
    );

    if (!captionsResponse.ok) {
      throw new Error(`YouTube Captions API error: ${captionsResponse.status}`);
    }

    const captionsData = await captionsResponse.json();
    
    if (!captionsData.items || captionsData.items.length === 0) {
      throw new Error('No captions available for this video');
    }

    // Find English captions or auto-generated ones
    let selectedCaption = captionsData.items.find((item: any) => 
      item.snippet.language === 'en' || item.snippet.language === 'en-US'
    ) || captionsData.items[0];

    // Download the caption content
    const transcriptResponse = await fetch(
      `https://www.googleapis.com/youtube/v3/captions/${selectedCaption.id}?key=${googleApiKey}&tfmt=srt`
    );

    if (!transcriptResponse.ok) {
      throw new Error(`Failed to download transcript: ${transcriptResponse.status}`);
    }

    const srtContent = await transcriptResponse.text();
    const transcript = parseSRT(srtContent);

    return new Response(JSON.stringify({
      transcript: transcript,
      language: selectedCaption.snippet.language,
      isAutoGenerated: selectedCaption.snippet.trackKind === 'asr'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error fetching YouTube transcript:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function parseSRT(srtContent: string): string {
  const lines = srtContent.split('\n');
  const textLines: string[] = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    // Skip sequence numbers and timestamps
    if (line && !line.match(/^\d+$/) && !line.includes('-->')) {
      textLines.push(line);
    }
  }
  
  return textLines.join(' ').replace(/<[^>]*>/g, ''); // Remove HTML tags
}
