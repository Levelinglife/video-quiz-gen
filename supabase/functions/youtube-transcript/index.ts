
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { videoId } = await req.json();
    
    if (!videoId) {
      console.log('No video ID provided');
      return new Response(JSON.stringify({ 
        error: 'Video ID is required' 
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log(`Starting transcript extraction for video: ${videoId}`);

    // Try multiple methods to get transcript
    let transcript = null;
    let source = 'unknown';

    // Method 1: Auto-generated captions (most common)
    transcript = await tryAutoGeneratedCaptions(videoId);
    if (transcript) {
      source = 'auto-generated';
      console.log(`Successfully extracted auto-generated captions: ${transcript.length} chars`);
    }

    // Method 2: Manual captions if auto-generated failed
    if (!transcript) {
      transcript = await tryManualCaptions(videoId);
      if (transcript) {
        source = 'manual';
        console.log(`Successfully extracted manual captions: ${transcript.length} chars`);
      }
    }

    // Method 3: Try different language codes
    if (!transcript) {
      transcript = await tryDifferentLanguages(videoId);
      if (transcript) {
        source = 'multi-language';
        console.log(`Successfully extracted captions with language detection: ${transcript.length} chars`);
      }
    }

    if (!transcript) {
      console.log('No captions found with any method');
      return new Response(JSON.stringify({ 
        error: 'No transcript available for this video',
        message: 'This video does not have captions or subtitles available. Please try a video with captions enabled.',
        details: 'We tried auto-generated captions, manual captions, and multiple languages but found none.'
      }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({
      transcript: transcript,
      source: source,
      length: transcript.length,
      videoId: videoId
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Transcript extraction error:', error);
    return new Response(JSON.stringify({ 
      error: 'Failed to extract transcript',
      message: error.message || 'An unexpected error occurred while extracting the transcript',
      details: 'Please check if the video is publicly accessible and has captions enabled'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function tryAutoGeneratedCaptions(videoId: string): Promise<string | null> {
  try {
    console.log(`Trying auto-generated captions for ${videoId}`);
    
    // Try the most common auto-generated caption URL
    const url = `https://www.youtube.com/api/timedtext?lang=en&v=${videoId}&fmt=json3&kind=asr`;
    console.log(`Fetching from: ${url}`);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (!response.ok) {
      console.log(`Auto-generated captions failed with status: ${response.status}`);
      return null;
    }
    
    const data = await response.json();
    
    if (!data.events || data.events.length === 0) {
      console.log('No events found in auto-generated captions');
      return null;
    }
    
    const transcript = data.events
      .filter(event => event.segs)
      .map(event => 
        event.segs
          .map(seg => seg.utf8 || '')
          .join('')
          .trim()
      )
      .filter(text => text.length > 0)
      .join(' ');
    
    return transcript.length > 10 ? transcript : null;
    
  } catch (error) {
    console.error('Error with auto-generated captions:', error);
    return null;
  }
}

async function tryManualCaptions(videoId: string): Promise<string | null> {
  try {
    console.log(`Trying manual captions for ${videoId}`);
    
    const url = `https://www.youtube.com/api/timedtext?lang=en&v=${videoId}&fmt=json3`;
    console.log(`Fetching from: ${url}`);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (!response.ok) {
      console.log(`Manual captions failed with status: ${response.status}`);
      return null;
    }
    
    const data = await response.json();
    
    if (!data.events || data.events.length === 0) {
      console.log('No events found in manual captions');
      return null;
    }
    
    const transcript = data.events
      .filter(event => event.segs)
      .map(event => 
        event.segs
          .map(seg => seg.utf8 || '')
          .join('')
          .trim()
      )
      .filter(text => text.length > 0)
      .join(' ');
    
    return transcript.length > 10 ? transcript : null;
    
  } catch (error) {
    console.error('Error with manual captions:', error);
    return null;
  }
}

async function tryDifferentLanguages(videoId: string): Promise<string | null> {
  const languages = ['en', 'en-US', 'en-GB', 'es', 'fr', 'de', 'it', 'pt', 'ru', 'ja', 'ko', 'zh', 'hi'];
  
  for (const lang of languages) {
    try {
      console.log(`Trying language: ${lang} for ${videoId}`);
      
      // Try auto-generated first
      let url = `https://www.youtube.com/api/timedtext?lang=${lang}&v=${videoId}&fmt=json3&kind=asr`;
      let response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      // If auto-generated fails, try manual
      if (!response.ok) {
        url = `https://www.youtube.com/api/timedtext?lang=${lang}&v=${videoId}&fmt=json3`;
        response = await fetch(url, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
      }
      
      if (response.ok) {
        const data = await response.json();
        
        if (data.events && data.events.length > 0) {
          const transcript = data.events
            .filter(event => event.segs)
            .map(event => 
              event.segs
                .map(seg => seg.utf8 || '')
                .join('')
                .trim()
            )
            .filter(text => text.length > 0)
            .join(' ');
          
          if (transcript.length > 10) {
            console.log(`Found captions in language: ${lang}`);
            return transcript;
          }
        }
      }
      
    } catch (error) {
      console.error(`Error with language ${lang}:`, error);
      continue;
    }
  }
  
  return null;
}
